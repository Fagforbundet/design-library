@use 'variables' as var;

$clr-placeholder: var.$clr-gray-100;
$clr-label: var.$clr-text-100;
$font-size-input: 19px;
$font-size-label: 19px;

@mixin focused_input() {
  outline: var.$clr-text-70 auto 1px !important;
  outline-offset: 2px !important;
}

.form {
  align-items: flex-start;
  display: flex;
  flex-flow: column wrap;
  gap: 0.5em;

  .validation {
    color: var.$clr-red-100;
    font-size: 80%;
    margin-top: 0.25rem;
    padding: 0 0 0 0.5rem;
    width: 100%;
  }

  &.submitted {
    input:not([type='checkbox']):not([type='radio']),
    select,
    textarea {
      &.ng-invalid {
        border-color: var.$clr-red-100;

        &:focus {
          box-shadow: 0 0 0 2px transparentize(var.$clr-red-100, 0.6);
        }
      }
    }

    input[type='radio'].ng-invalid:after {
      border: 1px solid var.$clr-red-100;
      border-radius: 4px;
      content: '';
      display: block;
      height: inherit;
      margin: -3px 0 0 -3px;
      padding: 2px;
      width: inherit;
    }
  }

  .buttons {
    width: 100%;
  }
}

/* No spacing on top */
form > .form-group:first-of-type > .form-control {
  margin-top: 0;
}

label {
  color: $clr-label;
  cursor: pointer;
  display: inline-block;
  font-size: $font-size-label;
  font-weight: 600;
  letter-spacing: 0.1px;
  margin: 0 0 0.3em;
}

textarea {
  resize: none;
  min-height: 100px;
}

// input:not([type='checkbox']):not([type='radio']),
input,
.input,
select,
textarea {
  background-color: var.$clr-white-100;
  border-width: 1px;
  border-color: var.$clr-border-100;
  border-radius: var.$border-radius-default;
  border-style: solid;
  box-sizing: border-box;
  color: var.$clr-text-100;
  display: block;
  font-size: $font-size-input;
  font-family: 'Source Sans Pro', sans-serif;
  padding: 15px 18px;
  width: 100%;

  &.secondary {
    background-color: transparent;
    cursor: pointer;
  }

  &::-moz-placeholder {
    /* Mozilla Firefox 19+ */
    opacity: 1;
  }

  &::placeholder {
    /* Most modern browsers support this now. */
    color: $clr-placeholder;
  }
}

input,
select,
textarea {
  &:focus-visible {
    @include focused_input;
  }
}

input,
textarea {
  &:read-only,
  &[readonly] {
    background: var.$clr-sand-70;
    cursor: default;
  }
}

input,
select,
textarea {
  &:disabled,
  &[disabled] {
    background: var.$clr-red-100;
    cursor: not-allowed;
  }
}

/* Separate rule for select, some browsers deem selects to always be :read-only */
select[readonly],
select.readonly {
  background: var.$clr-sand-70;
  cursor: pointer;
}

input[type='checkbox'],
input[type='radio'] {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;

  &:hover {
    cursor: pointer;
  }
}

label:has(input[type='checkbox']) {
  display: flex;
  grid-template-columns: 1em auto;
  gap: 0.5em;
  padding: 5px;
  margin: 0;
  font-size: 4rem;

  // unchecked checkbox
  &::before {
    content: '';
    width: 1.15em;
    height: 1.15em;
    background-size: cover;
    background-image: url("data:image/svg+xml,%3Csvg width='28' height='28' viewBox='0 0 28 28' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg id='28px/Form Checkbox'%3E%3Crect id='Rectangle 8' x='1' y='3' width='22' height='22' rx='4' fill='white' stroke='%23DCDAD3' stroke-width='1.5' stroke-linecap='square'/%3E%3C/g%3E%3C/svg%3E%0A");
  }
}

// checked checkbox
label:has(input[type='checkbox']:checked) {
  &::before {
    background-image: url("data:image/svg+xml,%3Csvg width='28' height='28' viewBox='0 0 28 28' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg id='28px/Form Checkbox Selected'%3E%3Crect id='Rectangle 5.1' x='1' y='3' width='22' height='22' rx='4' fill='white' stroke='%23DCDAD3' stroke-width='1.5' stroke-linecap='square'/%3E%3Cpath id='Vector 3.1' d='M5.75 14L10 18L17.75 9.5' stroke='%233C3C3B' stroke-width='1.75'/%3E%3C/g%3E%3C/svg%3E%0A");
  }
}

label:has(input[type='checkbox']:focus, input[type='checkbox']:focus-visible) {
  @include focused_input;
}
