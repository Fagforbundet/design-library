/**
 * PALETTE
 *
 * This file should contain the palette of basic colors.
 * For "named colors" ie. context based colors, see colors.scss.
 */

$palette: (
  "red": (
    150: #970705,
    120: #d32b1f,
    100: #fa3e34,
    70: #fc7871,
    50: #fc9e99,
    20: #fed8d6
  ),
  "teal": (
    100: #24acc8,
    70: #66c5d9,
    50: #91d5e3,
    20: #d3eef4
  ),
  "yellow": (
    100: #ffce00,
    70: #ffdd4d,
    50: #ffe680,
    20: #fff5cc
  ),
  "sand": (
    100: #eeeae5,
    70: #f3f0ed,
    60: #f6f4f0,
    50: #faf8f4
  ),
  "gray": (
    120: #a29f9c,
    100: #b5b2af
  ),
  "green": (
    100: #16b971
  ),
  "violet": (
    100: #bb29bb
  )
);

@function palette-get($name, $shade: 100) {
  @if not (type-of($shade) == "number") {
    @error "palette-get: $shade is not a number";
  }

  @if not (map-has-key($palette, $name)) {
    @return transparent;
  }

  @if (type-of(map-get($palette, $name)) == "color") {
    @return map-get($palette, $name);
  }

  @if not (palette-contains($name, $shade)) {
    @if $shade > 100 {
      @return mix(#000, palette-get($name), $shade - 100%);
    }

    @return mix(#fff, palette-get($name), 100% - $shade);
  }

  @return map-get(map-get($palette, $name), $shade);
}

@function palette-contains($name, $shade) {
  @return map-has-key(map-get($palette, $name), $shade);
}
